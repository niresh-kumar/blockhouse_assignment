name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: trade_user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: trade_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U trade_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        env:
          DATABASE_URL: postgresql://trade_user:password@localhost:5432/trade_db
        run: |
          pytest tests/  # Adjust path if tests are elsewhere

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t trade-api:latest .

      - name: Deploy to EC2 via SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem

          # Copy entire project to EC2
          scp -o StrictHostKeyChecking=no -i ssh_key.pem -r . $EC2_USER@$EC2_HOST:/home/$EC2_USER/trade-api/

          # SSH and deploy with Docker Compose
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            cd /home/$EC2_USER/trade-api
            docker-compose down
            docker-compose up --build -d
          EOF

          rm ssh_key.pem
