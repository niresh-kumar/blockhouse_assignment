name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'  # Only run on PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with mock DB
        run: |
          pytest tests/
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t trade-api:latest .

      - name: Create stable tarball
        run: |
          mkdir -p temp-deploy
          find . -maxdepth 1 -not -name 'temp-deploy' -not -name '.' -not -name '..' -exec cp -r {} temp-deploy/ \;
          cd temp-deploy
          tar --exclude='.git' -czf ../app.tar.gz .
          cd ..
          rm -rf temp-deploy

      - name: Deploy to EC2 via SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          # Debug secret values
          echo "EC2_HOST value: '$EC2_HOST'"
          echo "EC2_USER value: '$EC2_USER'"
          echo "EC2_SSH_KEY length: ${#EC2_SSH_KEY}"
          if [ -z "$EC2_HOST" ] || [ -z "$EC2_USER" ] || [ -z "$EC2_SSH_KEY" ]; then
            echo "Error: One or more secrets are empty!"
            echo "EC2_HOST is: '$EC2_HOST'"
            echo "EC2_USER is: '$EC2_USER'"
            exit 1
          fi
          echo "$EC2_SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          # Use explicit path for SCP
          scp -v -o StrictHostKeyChecking=no -i ssh_key.pem app.tar.gz $EC2_USER@$EC2_HOST:/home/$EC2_USER/app.tar.gz
          ssh -v -o StrictHostKeyChecking=no -i ssh_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            echo "Home dir contents:"
            ls -la /home/$EC2_USER/
            mkdir -p /home/$EC2_USER/blockhouse_assignments
            cd /home/$EC2_USER/blockhouse_assignments
            tar -xzf /home/$EC2_USER/app.tar.gz --overwrite || echo "Tar failed: $?"
            rm -f /home/$EC2_USER/app.tar.gz
            docker-compose down
            docker-compose up --build -d
          EOF
          rm ssh_key.pem
  